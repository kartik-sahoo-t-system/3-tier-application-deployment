---

# Define 'Configmap' to store non-sensitive database configuration 
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-conf  # name of ConfigMap, referenced in other files
data:
  host: mysql   # host address of mysql server, we are using DNS of Service
  name: to-do-app-db # name of the database for application

---

# Define 'Secret' to store 'root' user Credentials
apiVersion: v1
kind: Secret
metadata:
  name: db-root-credentials # Name of the Secret
data:
  password: bWFnaWM= # base64 encoded 'root' password 

---

# Define 'Secret' to store db-credentials 
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials # Name of the 'Secret'
data:
  username: dXNlcg==  # base64 encoded 'Secret' username
  password: ZGV2ZWxvcA== # base64 encoded 'Secret' password

---

# Define a 'Service' To Expose mysql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: mysql  # DNS name 
  labels:
    app: mysql
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:       # mysql Pod Should contain same labels
    app: mysql
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant
---
# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # name of PVC essential for identifying the storage data 
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector: # mysql Pod Should contain same labels 
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
      - image: mysql:5.7 # image from docker-hub
        args:
          - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
        name: mysql 
        env:
        - name: MYSQL_ROOT_PASSWORD # Setting Root Password of mysql From a 'Secret'
          valueFrom:
            secretKeyRef:
              name: db-root-credentials # Name of the 'Secret'
              key: password   # 'key' inside the Secret which contains required 'value'
        - name: MYSQL_USER # Setting USER username on mysql From a 'Secret'
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: MYSQL_PASSWORD # Setting USER Password on mysql From a 'Secret'
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
          valueFrom:
            configMapKeyRef:
              name: db-conf
              key: name
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage # Obtaining 'vloume' from PVC
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---

# Define 'Service' to expose backend application deployment
apiVersion: v1
kind: Service
metadata:
  name: to-do-app-backend  
spec:
  selector:  # backend application pod lables should match these
    app: to-do-app
    tier: backend
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 8080
  type: LoadBalancer   # use NodePort, if you are not running Kubernetes on cloud
---
# Configure 'Deployment' of backend application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: to-do-app-backend
  labels: 
    app: to-do-app
    tier: backend
spec:
  replicas: 2    # Number of replicas of back-end application to be deployed
  selector:
    matchLabels: # backend application pod labels should match these
      app: to-do-app
      tier: backend
  template:
    metadata:
      labels: # Must macth 'Service' and 'Deployment' labels
        app: to-do-app
        tier: backend  
    spec:                 
      containers: 
      - name: to-do-app-backend 
        image: wordpress   # docker image of backend application "kubernetesdemo/to-do-app-backend"
        env:   # Setting Enviornmental Variables
          - name: DB_HOST   # Setting Database host address from configMap
            valueFrom: 
              configMapKeyRef:
                name: db-conf  # name of configMap
                key: host
          - name: DB_NAME  # Setting Database name from configMap
            valueFrom:
              configMapKeyRef:
                name: db-conf 
                key: name
          - name: DB_USERNAME  # Setting Database username from Secret
            valueFrom:
              secretKeyRef:
                name: db-credentials # Secret Name
                key: username
          - name: DB_PASSWORD # Setting Database password from Secret
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: password     
        ports:
        - containerPort: 8080

---

